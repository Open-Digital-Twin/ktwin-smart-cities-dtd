apiVersion: dtd.ktwin/v0
kind: TwinInterface
metadata:
  name: ngsi-ld-city-seaportfacilities
  namespace: ktwin
spec:
  comment: 'Original source: https://github.com/smart-data-models/dataModel.Ports/blob/master/SeaportFacilities/doc/spec.md'
  description: 'Global description: The Data Model is intended to provide information
    about ports that can accommodate pleasure craft, commerce or passenger transport.
    It permit to represent the parameters of each port, its location, its mooring
    capacities and the free or paid services associated with it provided directly
    by the port or by professionals working on or near the port.'
  displayName: Seaport Facilities
  extendsInterface: ngsi-ld-city-ngsildbasemodel
  id: ngsi-ld-city-seaportfacilities
  properties:
  - description: The geographic area where a service or offered item is provided
    displayName: Area served
    name: areaServed
    schema:
      primitiveType: string
    writable: true
  - comment: Since DTDLv2 doesn't support arrays for Properties, a single string will
      be used.
    description: A Type of propulsions authorized to enter in the harbor. A combination
      of motor, sail, electric, oar, nuclear, lng, lpg, other
    displayName: Authorized propulsion
    name: authorizedPropulsion
    schema:
      primitiveType: string
    writable: true
  - comment: Since DTDLv2 doesn't support arrays for Properties, a single string will
      be used.
    description: Description of the complementary supplying services for the boat
      offered by professionals working on or near the harbor. A combination of guarding,
      fuelStation, fuelTankerTruck , drinkingWaterTankerTruck, provisioning, dryFairing,
      waterFairing, repair, expertise, gangways, liftingCranes, towing, wasteWaterPumping,
      boatConveying, boatTransfer, other
    displayName: Boat supplying services
    name: boatSupplyingServices
    schema:
      primitiveType: string
    writable: true
  - description: Name of the contracting authority
    displayName: Contracting authority
    name: contractingAuthority
    schema:
      primitiveType: string
    writable: true
  - description: The Contracting Company responsible of the management of the port.
    displayName: Contracting company
    name: contractingCompany
    schema:
      primitiveType: string
    writable: true
  - comment: Since DTDLv2 doesn't support arrays for Properties, a single string will
      be used.
    description: ' A combination of a list of active codes defined in the model Norme
      ISO 4217, Crypto Currencies , [Exchange Trading System](https://en.wikipedia.org/wiki/Local_exchange_trading_system'
    displayName: Currency accepted
    name: currencyAccepted
    schema:
      primitiveType: string
    writable: true
  - comment: Required property
    description: The date and time of this report in ISO8601 UTC format. It can be
      represented by a specific time instant or by an ISO8601 interval
    displayName: Date last reported
    name: dateLastReported
    schema:
      primitiveType: dateTime
    writable: true
  - comment: Since DTDLv2 doesn't support arrays for Properties, a single string will
      be used.
    description: List of the different types of electric transport proposed by the
      city. A combination of electricCar, electricBycicle, electricMotorBike, electricScooter
    displayName: Electric transport
    name: electricTransport
    schema:
      primitiveType: string
    writable: true
  - comment: Since DTDLv2 doesn't support arrays for Properties, a single string will
      be used.
    description: 'Description of the proposed facilities on the harbor. A combination
      of : toilets, showers, laundry, telephone, dustbins, dumpsters, container, selectiveSortingWaste,
      electricTerminal, waterTerminal, indoorRoomReservation, wifi, other'
    displayName: Facilities
    name: facilities
    schema:
      primitiveType: string
    writable: true
  - description: A Maximum draft allowed to access the harbor
    displayName: Maximum Draft [MTR]
    name: maxDraft
    schema:
      primitiveType: double
    writable: true
  - description: A Maximum length allowed to access the harbor
    displayName: Maximum Length
    name: maxLength
    schema:
      primitiveType: double
    writable: true
  - description: A Minimum length allowed to access the harbor
    displayName: Minimum Length
    name: minLength
    schema:
      primitiveType: double
    writable: true
  - description: A Maximum width allowed to access the harbor
    displayName: Maximum Width
    name: maxWidth
    schema:
      primitiveType: double
    writable: true
  - description: Maximum tonnage authorized to access the harbor
    displayName: Maximum Tonnage
    name: maxTonnage
    schema:
      primitiveType: double
    writable: true
  - comment: Since DTDLv2 doesn't support arrays for Properties, a single string will
      be used.
    description: Description of the additional services on the geographical area on
      or near the harbor. A combination of :touristOffice, fittingsStores, travelAgency,
      exchangeOffice, medicalOffice, pharmacy, groceryStores, restaurants, presses,
      bar, shops, seaExcursions, cityTour, touristicExcursions, others
    displayName: Nearby services
    name: nearbyServices
    schema:
      primitiveType: string
    writable: true
  - description: Total number of place in the harbor.
    displayName: Number of places
    name: numberOfPlace
    schema:
      primitiveType: integer
    writable: true
  - comment: Since DTDLv2 doesn't support arrays for Properties, a single string will
      be used.
    description: 'Accepted payment. A combination of a list of active codes defined
      in the model : Cash, CreditCard, CryptoCurrency, other'
    displayName: Payment accepted
    name: paymentAccepted
    schema:
      primitiveType: string
    writable: true
  - comment: Since DTDLv2 doesn't support arrays for Properties, a single string will
      be used.
    description: 'Description of the services provided directly by the harbor. A combination
      of : harborOffice, weather, customsServices, porters, boatRingRental, mooringAssistance,
      handlingAssistance, publicWifi, privateWifi, other'
    displayName: Port services provided
    name: portServicesProvided
    schema:
      primitiveType: string
    writable: true
  - comment: Since DTDLv2 doesn't support arrays for Properties, a single string will
      be used.
    description: 'ADescription of services provided by professional sales or rental
      agencies on the geographical area on or near the harbor. A combination of :
      boatRental, boatSale, jetSkiRental, jetSkiSale, carRental, luxuryCarRental,
      vanRental, bikeRental, scooterRental, Caddie, palletTransport, other'
    displayName: Rental sale services
    name: rentalSaleServices
    schema:
      primitiveType: string
    writable: true
  - comment: Since DTDLv2 doesn't support arrays for Properties, a single string will
      be used.
    description: List of the different types of urban transport Mode (Metro, Bus,
      Tram, ...) from the urban transport Mode GFTS standard STOP. A combination of
      values composed only of the attribute 'description' tram(0), metro(1), train(2),
      bus(3), ferry(4), cableTram(5), cableCar(6), funicular(7), trolleybus(11), monorail(12)
    displayName: Route type
    name: routeType
    schema:
      primitiveType: string
    writable: true
  - comment: Since DTDLv2 doesn't support arrays for Properties, a single string will
      be used.
    description: 'Description of the services provided for dedicated transport and
      shuttle services. A combination of : arking, shuttlesToAirport, shuttlesToRailway,
      internalShuttles, taxis, heliport, other'
    displayName: Transport services
    name: transportServices
    schema:
      primitiveType: string
    writable: true
  - comment: Required property
    description: It has to be 'SeaPort'
    displayName: Type
    name: type
    schema:
      primitiveType: string
  - comment: Required property. Since DTDLv2 doesn't support arrays for Properties,
      a single string will be used.
    description: 'A Type of harbor. A combination of : marina, merchandise, cruise,
      ferry, passengers, yachting, fishing, military, river, other'
    displayName: Type of port
    name: typeOfPort
    schema:
      primitiveType: string
    writable: true
  - description: Link to the official website of the harbor for more information.
    displayName: Website
    name: webSite
    schema:
      primitiveType: string
    writable: true
  relationships:
  - description: Reference to a list of Entity.
    displayName: authorizes
    name: refBoatAuthorized
    interface: ngsi-ld-city-boatauthorized
  - description: Reference to a list of Entity.
    displayName: has places available
    name: refBoatPlaceAvailable
    interface: ngsi-ld-city-boatplacesavailable
  - description: Reference to a list of Entity.
    displayName: priced by
    name: refBoatPlacePricing
    interface: ngsi-ld-city-boatplacepricing
  - description: Reference to the Main Entity Device if used as second link
    displayName: has main device
    maxMultiplicity: 1
    name: refDevice
    interface: ngsi-ld-city-device
  - description: Point of Interest that the element has relation to
    displayName: related to
    maxMultiplicity: 1
    name: refPointOfInterest
    interface: ngsi-ld-city-pointofinterest
status: {}
---
# apiVersion: dtd.ktwin/v0
# kind: TwinInstance
# metadata:
#   name: ngsi-ld-city-seaportfacilities-001
#   namespace: ktwin
# spec:
#   interface: ngsi-ld-city-seaportfacilities
#   template:
#     metadata:
#     spec:
#       containers:
#       - image: dev.local/ktwin/edge-service:0.1
#         imagePullPolicy: IfNotPresent
#         name: ngsi-ld-city-seaportfacilities-001
#         resources: {}
#   twinInstanceRelationships:
#   - name: refBoatAuthorized-001
#     interface: ngsi-ld-city-boatauthorized-001
#   - name: refBoatPlaceAvailable-001
#     interface: ngsi-ld-city-boatplacesavailable-001
#   - name: refBoatPlacePricing-001
#     interface: ngsi-ld-city-boatplacepricing-001
#   - name: refDevice-001
#     interface: ngsi-ld-city-device-001
#   - name: refPointOfInterest-001
#     interface: ngsi-ld-city-pointofinterest-001
# status: {}
